from browser import window

from reeborg_common import *

__id = "de"

_usage_ = '''
<h2 id="%s">Grundlegende Kommandos</h2>
<p>Beachte: In Javascript, werden <code>true</code> und <code>false</code> immer in Kleinbuchstaben geschrieben.
In Python hingegen, fangen <code>True</code> und <code>False</code> stets mit einem Großbuchstaben an.
Damit nicht ständig beide Möglichkeiten angegeben werden müssen, wird unten immer "wahr" und "falsch" benutzt.</p>
<p> Zusätzlich zu Javascript oder Python, verstehen Reeborg und alle anderen Roboter
folgende Befehle:</p>
<ul>
    <li><code>am_ziel()</code>: Bedingung, die "wahr" ergibt, wenn Reeborg sein Zuhause erreicht.</li>
    <li><code>am_ziel_orientierung()</code>: Bedingung, die "wahr" ergibt, wenn Reeborg am Ziel die nötige Ausrichtung hat. </li>
    <li><code>bau_wand()</code>: Fügt eine Wand direkt vor dem Feld ein und in der Richtung ein, wo Reeborg gerade steht.</li>
    <li><code>fertig()</code>: Hält das Programm an diesem Punkt an. (Ende)</li>
    <li><code>vorne_frei()</code>: "wahr", wenn keine Wand Reeborgs Weg blockiert.</li>
    <li><code>hat_marker()</code>: "wahr", wenn Reeborg noch mindestens einen Marker mit sich trägt.</li>
    <li><code>schaut_nach_norden()</code>: "wahr", wenn Reeborgs nach Norden blickt.
        (auf dem Bildschirm nach oben)</li>
    <li><code>schritt()</code>: Reeborg geht einen Schritt nach vorn.</li>
    <li><code>leg()</code> oder <code>leg("objekt")</code> wobei "objekt" eine von folgenden Möglichkeiten ist:
      <code>"marker"</code>,
      <code>"dreieck"</code>, <code>"quadrat"</code> oder <code>"stern"</code></li>
    <li><code>rechts_frei()</code>: "wahr", wenn sich direkt rechts von Reeborg keine Wand befindet.</li>
    <li><code>wiederhole(f, n)</code>: führe "f()" n-mal aus.</li>
    <li><code>objekt_hier()</code>: Liefert "falsch", wenn sich kein Objekt an Reeborgs momentanem Standort befindet, ansonsten
    wird der Typ des Objekts zurückgegeben, also <code>"dreieck"</code>, <code>"quadrat"</code>,
    <code>"stern"</code> oder code>"marker"</code>. </li>
    <li><code>nimm()</code> oder <code>nimm("objekt")</code> wobei "objekt" eine von folgenden Möglichkeiten ist:
        <code>"marker"</code>, <code>"dreieck"</code>, <code>"quadrat"</code> oder
        <code>"stern"</code></li>
    <li><code>marker_hier()</code>: "wahr" wenn sich ein Marker auf Reeborgs Standort befindet.</li>
    <li><code>dreh_links()</code>: Reeborg dreht sich um 90° nach links.</li>
</ul>
<p>Um zusätzliche Roboter zu erzeugen, kann man die Klasse <code>AlterRobot()</code> benutzen(bei JavaScript mit einem vorangestellten
<code>new</code>).</p>
<p>In addition, the following commands are available and are not tied to
any robot in particular.</p>
<ul>
    <li><code>from my_lib import *</code>: for <b>Python</b>, includes the code found in the
         Library tab</li>
    <li><code>inspect(object)</code>: shows result in Reeborg's Diary</li>
    <li><code>pause()</code>; can be called with an argument in milliseconds which indicates the
    time after which it will automatically resume.</li>
    <li><code>sound("true")</code>: turns sound on. Can be turned off by calling with no argument
        or with "false". Off by default or if delay between actions is less than 250ms.</li>
    <li><code>think(number)</code>: sets the amount of time in milliseconds between each robot
         action.</li>
    <li><code>write(string)</code>: write a string in Reeborg's Diary <b>only</b> if world is
         visible - otherwise, use <code>print</code>.</li>
    <li><code>select_world(string)</code>: selects a given world.</li>
        <li><code>select_challenge(string)</code>: selects a given (hidden) world.</li>
    <li><code>print(string)</code>: only valid with Python.  Somewhat equivalent to
         <code>write</code>.</li>
    <li><code>say(string)</code>: A dialog appears with Reeborg "saying" a message written as a
         string.</li>
</ul>
''' % ("basic-commands-" + __id)

RUR = window.RUR
RUR.ui.add_help(_usage_, __id, "English",
            "Instead of my_lib, token, star, triangle, and square, use: ")

# RUR._x_ defined in commands.js
at_goal = RUR._at_goal_
at_goal_orientation = RUR._at_goal_orientation_
build_wall = RUR._build_wall_
front_is_clear = RUR._front_is_clear_
has_token = RUR._has_token_
is_facing_north = RUR._is_facing_north_
move = RUR._move_
put = RUR._put_
token_here = RUR._token_here_
right_is_clear = RUR._right_is_clear_
object_here = RUR._object_here_
take = RUR._take_
turn_left = RUR._turn_left_
repeat = RUR._repeat_
set_max_steps = RUR._set_max_steps_
# defined in rur_utils.js
inspect = RUR.inspect
view_source = RUR.view_source
# defined in control.js
write = RUR.control.write
done = RUR.control.done
sound = RUR.control.sound
think = RUR.control.think
say = RUR.control.say
pause = RUR.control.pause
# defined in ui.js
select_world = RUR.ui.select_world
select_challenge = RUR.ui.select_challenge

# The following is the only language specific function which can only be used in monde.html,
# not when imported from world.html
try:
    verify = RUR.verify
except AttributeError:
    pass


class UsedRobot(object):
    def __init__(self, x=1, y=1, orientation='e', tokens=0):
        robot = RUR.robot.create_robot(x, y, orientation, tokens)
        self.body = robot
        RUR.world.add_robot(self.body)

    def move(self):
        RUR.control.move(self.body)

    def at_goal(self):
        return RUR.control.at_goal(self.body)

    def at_goal_orientation(self):
        return RUR.control.at_goal_orientation(self.body)

    def build_wall(self):
        RUR.control.build_wall(self.body)

    def front_is_clear(self, no_frame=False):
        return RUR.control.front_is_clear(self.body, no_frame=no_frame)

    def has_token(self):
        return RUR.control.has_token(self.body)

    def is_facing_north(self):
        return RUR.control.is_facing_north(self.body)

    def put(self, arg="token"):
        RUR.control.put(self.body, arg)

    def token_here(self):
        return RUR.control.token_here(self.body)

    def right_is_clear(self):
        return RUR.control.right_is_clear(self.body)

    def object_here(self):
        return RUR.control.object_here(self.body)

    def take(self, arg="token"):
        RUR.control.take(self.body, arg)

    def turn_left(self, no_frame=False):
        RUR.control.turn_left(self.body, no_frame=no_frame)
