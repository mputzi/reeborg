from browser import window

from reeborg_common import *

__id = "de"

_usage_ = '''
<h2 id="%s">Grundlegende Kommandos</h2>
<p>Beachte: In Javascript, werden <code>true</code> und <code>false</code> immer in Kleinbuchstaben geschrieben.
In Python hingegen, fangen <code>True</code> und <code>False</code> stets mit einem Großbuchstaben an.
Damit nicht ständig beide Möglichkeiten angegeben werden müssen, wird unten immer "wahr" und "falsch" benutzt.</p>
<p> Zusätzlich zu Javascript oder Python, verstehen Reeborg und alle anderen Roboter
folgende Befehle:</p>
<ul>
    <li><code>am_ziel()</code>: Bedingung, die "wahr" ergibt, wenn Reeborg sein Zuhause erreicht.</li>
    <li><code>am_ziel_orientierung()</code>: Bedingung, die "wahr" ergibt, wenn Reeborg am Ziel die nötige Ausrichtung hat. </li>
    <li><code>bau_wand()</code>: Fügt eine Wand direkt vor dem Feld ein und in der Richtung ein, wo Reeborg gerade steht.</li>
    <li><code>fertig()</code>: Hält das Programm an diesem Punkt an. (Ende)</li>
    <li><code>vorne_frei()</code>: "wahr", wenn keine Wand Reeborgs Weg blockiert.</li>
    <li><code>hat_marker()</code>: "wahr", wenn Reeborg noch mindestens einen Marker mit sich trägt.</li>
    <li><code>schaut_nach_norden()</code>: "wahr", wenn Reeborgs nach Norden blickt.
        (auf dem Bildschirm nach oben)</li>
    <li><code>geh()</code>: Reeborg geht einen Schritt nach vorn.</li>
    <li><code>leg()</code> oder <code>leg("objekt")</code> wobei "objekt" eine von folgenden Möglichkeiten ist:
      <code>"marker"</code>,
      <code>"dreieck"</code>, <code>"quadrat"</code> oder <code>"stern"</code></li>
    <li><code>rechts_frei()</code>: "wahr", wenn sich direkt rechts von Reeborg keine Wand befindet.</li>
    <li><code>wiederhole(f, n)</code>: führe "f()" n-mal aus.</li>
    <li><code>objekt_hier()</code>: Liefert "falsch", wenn sich kein Objekt an Reeborgs momentanem Standort befindet, ansonsten
    wird der Typ des Objekts zurückgegeben, also <code>"dreieck"</code>, <code>"quadrat"</code>,
    <code>"stern"</code> oder <code>"marker"</code>. </li>
    <li><code>nimm()</code> oder <code>nimm("objekt")</code> wobei "objekt" eine von folgenden Möglichkeiten ist:
        <code>"marker"</code>, <code>"dreieck"</code>, <code>"quadrat"</code> oder
        <code>"stern"</code></li>
    <li><code>marker_hier()</code>: "wahr" wenn sich ein Marker auf Reeborgs Standort befindet.</li>
    <li><code>dreh_links()</code>: Reeborg dreht sich um 90° nach links.</li>
</ul>
<p>Um zusätzliche Roboter zu erzeugen, kann man die Klasse <code>AlterRobot()</code> benutzen(bei JavaScript mit einem vorangestellten
<code>new</code>).</p>
<p>Zusätzlich sind die folgenden Befehle verfügbar und sind nicht an einen bestimmten Roboter gebunden:</p>
<ul>
    <li><code>from my_lib import *</code>: für <b>Python</b>; schließt den Code, der im Bibliothek-Tab vorliegt, mit ein.</li>
    <li><code>inspiziere(object)</code>: zeigt das Resultat in Reeborgs Tagebuch</li>
    <li><code>pause(zahl)</code>; kann aufgerufen werden mit einer Angabe von Millisekunden im Argument, das die Zeit angibt, bis der Roboter wieder
    weiterarbeitet.</li>
    <li><code>sound("true")</code>: Schaltet den Sound ein. Gibt man kein Argument oder "false" an, wird der Sound deaktiviert.
       Standardmäßig ist der Sound deaktiviert, er schaltet sich automatisch aus, wenn die Verzögerung zwischen den Aktionen
       weniger als 250ms beträgt.</li>
    <li><code>denke(zahl)</code>: Setzt die Zeit in Millisekunden, die zwischen zwei Aktionen des Roboters vergeht.</li>
    <li><code>schreibe(zeichenkette)</code>: schreibt eine zeichenkette in Reeborgs Tagebuch, aber <b>nur</b> dann, wenn die Welt
      sichtbar ist, ansonsten, muss man den Befehl <code>drucke</code> verwenden.</li>
    <li><code>waehle_welt(zeichenkette)</code>: wählt eine vorgegebene Welt aus.</li>
        <li><code>waehle_herausforderung(zeichenkette)</code>: wählt eine vorgegebene, aber versteckte Welt aus.</li>
    <li><code>drucke(zeichenkette)</code>: macht nur Sinn in Python. Dieser Befehl ist äquivalent zu 
         <code>schreibe</code>.</li>
    <li><code>sag(zeichenkette)</code>: Ein Dialog-Fenster erscheint, in dem Reeborg eine Nachricht, nämlich die vorgegebene Zeichenkette, "sagt".</li>
</ul>
''' % ("basic-commands-" + __id)

RUR = window.RUR
RUR.ui.add_help(_usage_, __id, "German",
            "Anstatt von my_lib, token, star, triangle, und square, benutze: ")

# RUR._x_ defined in commands.js
am_ziel = RUR._at_goal_
am_ziel_orientierung = RUR._at_goal_orientation_
bau_wand = RUR._build_wall_
vorne_frei = RUR._front_is_clear_
hat_marker = RUR._has_token_
schaut_nach_norden = RUR._is_facing_north_
geh = RUR._move_
leg = RUR._put_
marker_hier = RUR._token_here_
rechts_frei = RUR._right_is_clear_
objekt_hier = RUR._object_here_
nimm = RUR._take_
dreh_links = RUR._turn_left_
wiederhole = RUR._repeat_
setze_max_schritte = RUR._set_max_steps_
# defined in rur_utils.js
inspiziere = RUR.inspect
view_source = RUR.view_source
# defined in control.js
schreibe = RUR.control.write
fertig = RUR.control.done
sound = RUR.control.sound
denke = RUR.control.think
sag = RUR.control.say
pause = RUR.control.pause
# defined in ui.js
waehle_welt = RUR.ui.select_world
waehle_herausforderung = RUR.ui.select_challenge

# The following is the only language specific function which can only be used in monde.html,
# not when imported from world.html
try:
    verifiziere = RUR.verify
except AttributeError:
    pass


class GebrauchterBot(object):
    def __init__(self, x=1, y=1, orientierung='e', marker=0):
        robot = RUR.robot.create_robot(x, y, orientierung, marker)
        self.body = robot
        RUR.world.add_robot(self.body)

    def geh(self):
        RUR.control.move(self.body)

    def am_ziel(self):
        return RUR.control.at_goal(self.body)

    def am_ziel_orientierung(self):
        return RUR.control.at_goal_orientation(self.body)

    def bau_wand(self):
        RUR.control.build_wall(self.body)

    def vorne_frei(self, no_frame=False):
        return RUR.control.front_is_clear(self.body, no_frame=no_frame)

    def hat_marker(self):
        return RUR.control.has_token(self.body)

    def schaut_nach_norden(self):
        return RUR.control.is_facing_north(self.body)

    def leg(self, arg="marker"):
        RUR.control.put(self.body, arg)

    def marker_hier(self):
        return RUR.control.token_here(self.body)

    def rechts_frei(self):
        return RUR.control.right_is_clear(self.body)

    def objekt_hier(self):
        return RUR.control.object_here(self.body)

    def nimm(self, arg="marker"):
        RUR.control.take(self.body, arg)

    def dreh_links(self, no_frame=False):
        RUR.control.turn_left(self.body, no_frame=no_frame)
